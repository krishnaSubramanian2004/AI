from itertools import permutations

def is_valid_solution(assignment, unique_letters, addends, result):
    letter_to_digit = {letter: digit for letter, digit in zip(unique_letters, assignment)}
    
    def word_to_number(word):
        return int(''.join(str(letter_to_digit[letter]) for letter in word))
    
    if letter_to_digit[result[0]] == 0:
        return False
    
    addend_sum = sum(word_to_number(addend) for addend in addends)
    result_number = word_to_number(result)
    
    return addend_sum == result_number

def solve_cryptarithmetic(addends, result):
    unique_letters = set(''.join(addends) + result)
    
    if len(unique_letters) > 10:
        raise ValueError("Too many unique letters for the number of digits available.")
    
    for perm in permutations(range(10), len(unique_letters)):
        if is_valid_solution(perm, unique_letters, addends, result):
            solution = {letter: digit for letter, digit in zip(unique_letters, perm)}
            return solution
    
    return None

def print_solution(solution):
    if solution:
        print("Solution found:")
        for letter, digit in solution.items():
            print(f"{letter} = {digit}")
    else:
        print("No solution found.")

# Example usage
addends = ["SEND", "MORE"]
result = "MONEY"

solution = solve_cryptarithmetic(addends, result)
print_solution(solution)
